ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
return(cbind(ols.b_hat,ols.se,drop=F))
}
ols.result <- ols(X,y)
ols <- function(X,y){
n <- nrow(X)
k <- ncol(X)
ols.b_hat <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.b_hat) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
return(cbind(b_hat = ols.b_hat,se = ols.se))
}
ols.result <- ols(X,y)
View(ols.result)
ols <- function(X,y){
n <- nrow(X)
k <- ncol(X)
ols.b_hat <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.b_hat) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
return(data.frame(b_hat = ols.b_hat,se = ols.se))
}
ols.result <- ols(X,y)
View(ols.result)
result.49 <- boot(mydata,ols$se,49)
result.49 <- boot(mydata,ols,49)
# Regression of Y on X where X = (1,X1,X2,X3) (Mannually)
ols <- function(X,y,coeff=T){
n <- nrow(X)
k <- ncol(X)
ols.b_hat <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.b_hat) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(coeff == T, return(data.frame(b_hat = ols.b_hat,se = ols.se)),return(data.frame(se = ols.se)))
}
ols.result <- ols(X,y)
View(ols.result)
# Regression of Y on X where X = (1,X1,X2,X3) (Mannually)
ols <- function(X,y,coeff=F){
n <- nrow(X)
k <- ncol(X)
ols.b_hat <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.b_hat) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(coeff == T, return(data.frame(b_hat = ols.b_hat,se = ols.se)),return(data.frame(se = ols.se)))
}
ols.result <- ols(X,y)
ols.result <- ols(X,y,coeff=T)
# Check with boot package
result.49 <- boot(mydata,ols,49)
ifelse(coeff == T, return(cbind(b_hat = ols.b_hat,se = ols.se)),return(cbind(se = ols.se)))
# Regression of Y on X where X = (1,X1,X2,X3) (Mannually)
ols <- function(X,y,coeff=F){
n <- nrow(X)
k <- ncol(X)
ols.b_hat <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.b_hat) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(coeff == T, return(cbind(b_hat = ols.b_hat,se = ols.se)),return(cbind(se = ols.se)))
}
ols.result <- ols(X,y,coeff=T)
# Check with boot package
result.49 <- boot(mydata,ols,49)
# Check with boot package
result.49 <- boot(X=X,y=y,ols,49)
# Check with lm function
lm.result <- lm(Y~X1+X2+X3, mydata)
coef(lm.result)
coef(summary(lm.result))
coef(summary(lm.result))[,2]
# Regression of Y on X where X = (1,X1,X2,X3) (Mannually)
ols <- function(X,y,se=F){
n <- nrow(X)
k <- ncol(X)
ols.b_hat <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.b_hat) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(se == T, return(data.frame(b_hat = ols.b_hat,se = ols.se)),return(data.frame(b_hat = ols.b_hat))) # output coef only by default
}
X <- as.matrix(cbind(1,X1,X2,X3))
y <- as.matrix(Y)
ols.result <- ols(X,y,se=T)
View(ols.result)
coef(summary(lm.result))[,c(1,2)] #coefficient & standard error
ols.result
View(X)
class(cbind(1,X1,X2,X3))
class(Y)
est<-NULL
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, repalce = T)
X2.t <- sample(X2, obs, repalce = T)
X3.t <- sample(X3, obs, repalce = T)
eps.t <- sample(eps, obs, repalce = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(est,ols(X.t,y.t))
}
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(est,ols(X.t,y.t))
}
rm(list=ls())
# Set Working directory
# install.packages("boot")
library("boot")
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Exercise 1: Data generation
obs <- 10000
X1 <- runif(obs, max = 3, min = 1)
X2 <- rgamma(obs,3,scale = 2)
X3 <- rbinom(obs,1,0.3)
eps <- rnorm(obs, mean = 2, sd = 1)
Y <- 0.5 + 1.2*X1 - 0.9*X2 + 0.1*X2 + eps
ydum <- ifelse(Y > mean(Y),1,0)
mydata <- data.frame(Y,ydum,X1,X2,X3,eps)
# Exercise 2:
# Correlation between Y and X1
cor(Y,X1)
ols <- function(X,y,se=F){
n <- nrow(X)
k <- ncol(X)
ols.coef <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.coef) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(se == T, return(data.frame(b_hat = ols.coef,se = ols.se)),return(data.frame(b_hat = ols.coef))) # output coef only by default
}
X <- cbind(1,X1,X2,X3)
y <- as.matrix(Y)
ols.result <- ols(X,y,se=T)
ols.result
# Check with lm function
lm.result <- lm(Y~X1+X2+X3, mydata)
coef(summary(lm.result))[,c(1,2)] #coefficient & standard error
est<-NULL
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(est,ols(X.t,y.t))
}
View(X.t)
View(y.t)
ols(X.t,y.t)
est[c(1:4),]<- NULL
boot.coef <- cbind(est,ols(X.t,y.t))
boot.coef <- data.frame(coef = numeric(0))
View(boot.coef)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
boot.coef <- data.frame(matrix(nrow=4, ncol=1))
View(boot.coef)
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
boot.coef <- data.frame(matrix(nrow=4, ncol=1))
boot.coef <- c(boot.coef,ols(X.t,y.t))
View(boot.coef)
boot.coef <- data.frame(matrix(nrow=4, ncol=1))
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
boot.coef <- data.frame()
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
View(boot.coef)
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
boot.se <- apply(est,1,function(x)(sd(x)/sqrt(length(x))))
boot.se <- apply(est,1,mean(x))))
boot.se <- apply(est,1,mean(x))
boot.se <- apply(est,1,mean)
boot.se <- apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x))))
boot.se$se <- apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x))))
View(boot.se)
boot.se <- apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x))))
boot.se
boot.se <- data.frame(apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x)))))
View(boot.se)
boot.se$se <- data.frame(apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x)))))
rm(boot.se)
boot.se$se <- data.frame(apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x)))))
boot.se <- data.frame(apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x))))=se)
boot.se <- data.frame(se=apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x)))))
View(boot.se)
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- data.frame(boot.coef,ols(X.t,y.t))
}
ncol(boot.coef)
rm(boot.coef)
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- data.frame(boot.coef,ols(X.t,y.t))
}
View(boot.se)
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
boot.se <- data.frame(se=apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x)))))
View(boot.se)
View(lm.result)
View(ols.result)
# Check with boot package
lm.se <- function(data,index){
d <- data[index,]
l <- lm(d$Y~0+d$X1+d$X2+d$X3,d)
l.se <- coef(summary(l))[,2]
return(l.se)
}
result.49 <- boot(mydata,ols,49)
result.49 <- boot(mydata,lm.se,49)
result.49$t0
# Check with boot package
lm.se <- function(data,index){
d <- data[index,]
l <- lm(d$Y~d$X1+d$X2+d$X3,d)
l.se <- coef(summary(l))[,2]
return(l.se)
}
result.49 <- boot(mydata,lm.se,49)
result.49$t0
rm(list=ls())
# Set Working directory
# install.packages("boot")
library("boot")
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Exercise 1: Data generation
obs <- 10000
X1 <- runif(obs, max = 3, min = 1)
X2 <- rgamma(obs,3,scale = 2)
X3 <- rbinom(obs,1,0.3)
eps <- rnorm(obs, mean = 2, sd = 1)
Y <- 0.5 + 1.2*X1 - 0.9*X2 + 0.1*X2 + eps
ydum <- ifelse(Y > mean(Y),1,0)
mydata <- data.frame(Y,ydum,X1,X2,X3,eps)
# Exercise 2:
# Correlation between Y and X1
cor(Y,X1)
# Regression of Y on X where X = (1,X1,X2,X3) (Mannually)
ols <- function(X,y,se=F){
n <- nrow(X)
k <- ncol(X)
ols.coef <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.coef) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(se == T, return(data.frame(b_hat = ols.coef,se = ols.se)),return(data.frame(b_hat = ols.coef))) # output coef only by default
}
X <- cbind(1,X1,X2,X3)
y <- as.matrix(Y)
ols.result <- ols(X,y,se=T)
ols.result
# Check with lm function
lm.result <- lm(Y~X1+X2+X3, mydata)
coef(summary(lm.result))[,c(1,2)] #coefficient & standard error
# Boodstrap mannually
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:49) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
boot.se <- data.frame(se=apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x)))))
View(boot.se)
apply(boot.coef,1,function(x)(sd(x)/sqrt(length(x))))
apply(boot.coef,1,sd)
boot.se <- data.frame(se=apply(boot.coef,1,sd))
# Check with boot package
lm.se <- function(data,index){
d <- data[index,]
l <- lm(d$Y~d$X1+d$X2+d$X3,d)
l.se <- coef(summary(l))[,2]
return(l.se)
}
result.49 <- boot(mydata,lm.se,49)
result.49$t0
paste("boot.se_",n,sep = "")
paste("boot.se_",1,sep = "")
paste("boot.se_",1,sep = "") <- null
paste("boot.se_",1,sep = "") <- NULL
b <- data.frame()
names(b) <- paste("boot.se_",1,sep = "")
assign(paste("boot.se_",1,sep = "") ,b)
View(boot.se_1)
# Boodstrap mannually
boot <- function(n){
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
return(assign(paste("boot.se_",1,sep = "") ,data.frame(se=apply(boot.coef,1,sd))) )
}
# Boodstrap mannually
bootstrap <- function(n){
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
return(assign(paste("boot.se_",1,sep = "") ,data.frame(se=apply(boot.coef,1,sd))) )
}
bootstrap(49)
# Boodstrap mannually
bootstrap <- function(n){
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
assign(paste("boot.se_",1,sep = "") ,data.frame(se=apply(boot.coef,1,sd)))
return(paste("boot.se_",1,sep = ""))
}
bootstrap(49)
# Boodstrap mannually
bootstrap <- function(n){
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
assign(paste("boot.se_",i,sep = ""),data.frame(se=apply(boot.coef,1,sd)))
return(boot.se_i)
}
bootstrap(49)
# Boodstrap mannually
bootstrap <- function(n){
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
assign(paste("boot.se_",i,sep = ""),data.frame(se=apply(boot.coef,1,sd)))
return(d = data.frame(se=apply(boot.coef,1,sd)))
}
bootstrap(49)
rm(list=ls())
# Set Working directory
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Exercise 1: Data generation
obs <- 10000
X1 <- runif(obs, max = 3, min = 1)
X2 <- rgamma(obs,3,scale = 2)
X3 <- rbinom(obs,1,0.3)
eps <- rnorm(obs, mean = 2, sd = 1)
Y <- 0.5 + 1.2*X1 - 0.9*X2 + 0.1*X2 + eps
ydum <- ifelse(Y > mean(Y),1,0)
mydata <- data.frame(Y,ydum,X1,X2,X3,eps)
# Exercise 2:
# Correlation between Y and X1
cor(Y,X1)
# Regression of Y on X where X = (1,X1,X2,X3) (Mannually)
ols <- function(X,y,se=F){
n <- nrow(X)
k <- ncol(X)
ols.coef <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.coef) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(se == T, return(data.frame(b_hat = ols.coef,se = ols.se)),return(data.frame(b_hat = ols.coef))) # output coef only by default
}
X <- cbind(1,X1,X2,X3)
y <- as.matrix(Y)
ols.result <- ols(X,y,se=T)
ols.result
# Check with lm function
lm.result <- lm(Y~X1+X2+X3, mydata)
coef(summary(lm.result))[,c(1,2)] #coefficient & standard error
# Boodstrap mannually
bootstrapse <- function(n){
boot.coef <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from X1 X2 X3 eps, generate Y
X1.t <- sample(X1, obs, replace = T)
X2.t <- sample(X2, obs, replace = T)
X3.t <- sample(X3, obs, replace = T)
eps.t <- sample(eps, obs, replace = T)
X.t <-cbind(1,X1.t,X2.t,X3.t)
y.t <- as.matrix(0.5 + 1.2*X1.t - 0.9*X2.t + 0.1*X2.t + eps)
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.t,y.t))
}
return(data.frame(se=apply(boot.coef,1,sd)))
}
boot.se_49 <- bootstrapse(49)
boot.se_499 <- bootstrapse(499)
boot.se_49
boot.se_499
ols.result
#Exercise 3: ----
# Check with glm function:
probit.fun <- glm(ydum ~ 0 + X1 + X2 + X3, family = binomial(link = "probit"),
data = mydata,offset = rep(0.5,10000))
coef(summary(probit.fun))[,c(1,2)]
#Exercise 3: ----
# Check with glm function:
probit.fun <- glm(ydum ~ X1 + X2 + X3, family = binomial(link = "probit"),
data = mydata)
coef(summary(probit.fun))[,c(1,2)]
# likelihood function
probit.llike <- function(b. =b, y. = ydum,X. = X){
phi = pnorm(X.%*%b.+0.5)
phi[phi>0.9999]=0.9999
f=sum(y.*log(phi)+sum((1-y.)*log(1-phi)))
f=-f
return(f)
}

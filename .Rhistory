load("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/dat/datjss.csv")
load("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/dat/datjss.csv")
datstu <- read.csv("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/dat/datstu.csv",header = TRUE)
View(datstu)
View(datstu)
datsss <- read.csv("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/dat/datsss.csv",header = TRUE)
datjsu <- read.csv("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/dat/datjss.csv",header = TRUE)
View(datsss)
View(datstu)
View(datjsu)
summary(datstu)
rm(list=ls())
# Set Working directory
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Reading the CSV files
datstu <- read.csv("datstu.csv",header = TRUE,na.strings=c("", "NA"))
datsss <- read.csv("datsss.csv",header = TRUE,na.strings=c("", "NA"))
datjsu <- read.csv("datjss.csv",header = TRUE,na.strings=c("", "NA"))
# Exercise 1 ----
# Number of student
stuNum <-length(datstu$X)
# Number of school
school <- as.vector(as.matrix(datstu[,5:10]))
schoolNum <- length(na.omit(unique(school)))
# Number of program
program <- as.vector(as.matrix(datstu[,11:16]))
programNum <- length(na.omit(unique(program)))
# Number of Choice
choice <- na.omit(unique(cbind(school, program)))
choiceNum <- length(choice)
# Number of NA's in the score
missing <- sum(is.na(datstu$score))
# Apply to the same school
index <- rep(1:stuNum,6) # creating a index column, since "school" goes by person
app <- na.omit(unique(cbind(index,school))) #combine with school directly,and take out repeat and NA's
# app <- app[order(app[,2]),] # if you want to rank the result
sameSchool <- table(app[,2])
# Num of Students who apply for less than 6
lessThan_6 <- sum(is.na(datstu$schoolcode6)) #by observing, only need to look for student who didn't fill the schoolcode6
# Exercise 2 ----
# Cleaning datsss
datsss$X <- NULL
# removing those repeating school names with numbers and NAs
datsss_u <- datsss[order(datsss[,1]),]
datsss_u <- datsss_u[!grepl("[[:digit:]]{5}",datsss_u$schoolname),]
datsss_u <- na.omit(datsss_u)
datsss_u <- datsss_u[!duplicated(datsss_u$schoolcode),]
# Merging
# choice <- choice[order(choice[,1]),] # ranking for observation
schoolLevel <- merge(choice,datsss_u,by.x="school",by.y="schoolcode")
# Adding admission result
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
# tapply function
quality <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),mean)
cutoff <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),min)
size <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),length)
schoolLevel <- merge(schoolLevel,quality,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,cutoff,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,size,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
names(schoolLevel)[7] <- "quality"
names(schoolLevel)[8] <- "cutoff"
names(schoolLevel)[9] <- "size"
# Exercise 3 ----
# clean datjsu
datjsu <- na.omit(datjsu)
# datjsu$X <- NULL
datstu_c3 <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
View(datstu_c3)
datstu_c3 <- merge(datstu_c[,17],datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c3 <- merge(datstu_c[,17:19],datsss_u,by.x="resultSchool",by.y="schoolcode")
View(datstu_c)
datstu_c3 <- merge(datsss_u,datstu_c[,17:19],by.y="resultSchool",by.x="schoolcode")
rm(datstu_c3)
datstu_c3 <- merge(datsss_u,datstu_c[,17:19],by.y="resultSchool",by.x="schoolcode")
View(datstu_c3)
datstu_c3 <- merge(datsss_u,datstu_c[,17:19],by.y="resultSchool",by.x="schoolcode",all = TRUE)
typeof(datstu_c)
typeof(datsss_u)
typeof(quality)
typeof(schoolLevel)
View(schoolLevel)
typeof(choice)
rm(list=ls())
# Set Working directory
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Reading the CSV files
datstu <- read.csv("datstu.csv",header = TRUE,na.strings=c("", "NA"))
datsss <- read.csv("datsss.csv",header = TRUE,na.strings=c("", "NA"))
datjsu <- read.csv("datjss.csv",header = TRUE,na.strings=c("", "NA"))
# Exercise 1 ----
# Number of student
stuNum <-length(datstu$X)
# Number of school
school <- as.vector(as.matrix(datstu[,5:10]))
schoolNum <- length(na.omit(unique(school)))
# Number of program
program <- as.vector(as.matrix(datstu[,11:16]))
programNum <- length(na.omit(unique(program)))
# Number of Choice
choice <- na.omit(unique(cbind(school, program)))
choiceNum <- length(choice)
# Number of NA's in the score
missing <- sum(is.na(datstu$score))
# Apply to the same school
index <- rep(1:stuNum,6) # creating a index column, since "school" goes by person
app <- na.omit(unique(cbind(index,school))) #combine with school directly,and take out repeat and NA's
# app <- app[order(app[,2]),] # if you want to rank the result
sameSchool <- table(app[,2])
# Num of Students who apply for less than 6
lessThan_6 <- sum(is.na(datstu$schoolcode6)) #by observing, only need to look for student who didn't fill the schoolcode6
# Exercise 2 ----
# Cleaning datsss
datsss$X <- NULL
# removing those repeating school names with numbers and NAs
datsss_u <- datsss[order(datsss[,1]),]
datsss_u <- datsss_u[!grepl("[[:digit:]]{5}",datsss_u$schoolname),]
datsss_u <- na.omit(datsss_u)
datsss_u <- datsss_u[!duplicated(datsss_u$schoolcode),]
View(datsss_u)
View(choice)
# Merging
choice <- choice[order(choice[,1]),] # ranking for observation
schoolLevel <- merge(choice,datsss_u,by.x="school",by.y="schoolcode")
# Adding admission result
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
# tapply function
quality <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),mean)
View(quality)
cutoff <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),min)
size <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),length)
schoolLevel <- merge(schoolLevel,quality,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(choice,datsss_u,by.x="school",by.y="schoolcode")
typeof(schoolLevel$school)
typeof(quality$Group.1)
typeof(quality$Group.2)
typeof(datstu$score)
typeof(datstu_c$resultSchool)
typeof(datstu_c$score)
typeof(datstu_c$schoolcode1)
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# tapply function
quality <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),mean)
cutoff <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),min)
size <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),length)
typeof(quality$Group.1)
typeof(quality$Group.2)
typeof(size$Group.2)
typeof(size$Group.1)
schoolLevel <- merge(schoolLevel,quality,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,cutoff,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,size,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
names(schoolLevel)[7] <- "quality"
names(schoolLevel)[8] <- "cutoff"
names(schoolLevel)[9] <- "size"
View(choice)
View(app)
length(cbind(index,school))
4089876/2
length(unique(cbind(index,school)))
3703800/2
choice <- as.data.frame(choice)
app <- as.data.frame(app) #conforming the format
rm(list=ls())
# Set Working directory
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Reading the CSV files
datstu <- read.csv("datstu.csv",header = TRUE,na.strings=c("", "NA"))
datsss <- read.csv("datsss.csv",header = TRUE,na.strings=c("", "NA"))
datjsu <- read.csv("datjss.csv",header = TRUE,na.strings=c("", "NA"))
# Exercise 1 ----
# Number of student
stuNum <-length(datstu$X)
# Number of school
school <- as.vector(as.matrix(datstu[,5:10]))
schoolNum <- length(na.omit(unique(school)))
# Number of program
program <- as.vector(as.matrix(datstu[,11:16]))
programNum <- length(na.omit(unique(program)))
# Number of Choice
choice <- na.omit(unique(cbind(school, program)))
choice <- as.data.frame(choice)
choiceNum <- length(choice)
# Number of NA's in the score
missing <- sum(is.na(datstu$score))
# Apply to the same school
index <- rep(1:stuNum,6) # creating a index column, since "school" goes by person
app <- na.omit(unique(cbind(index,school))) #combine with school directly,and take out repeat and NA's
app <- as.data.frame(app) #conforming the format
# app <- app[order(app[,2]),] # if you want to rank the result
sameSchool <- table(app[,2])
# Num of Students who apply for less than 6
lessThan_6 <- sum(is.na(datstu$schoolcode6)) #by observing, only need to look for student who didn't fill the schoolcode6
datsss$X <- NULL
# removing those repeating school names with numbers and NAs
datsss_u <- datsss[order(datsss[,1]),]
datsss_u <- datsss_u[!grepl("[[:digit:]]{5}",datsss_u$schoolname),]
datsss_u <- na.omit(datsss_u)
datsss_u <- datsss_u[!duplicated(datsss_u$schoolcode),]
# Merging
choice <- choice[order(choice[,1]),] # ranking for observation
schoolLevel <- merge(choice,datsss_u,by.x="school",by.y="schoolcode")
# Adding admission result (I noticed that there are programs who did't admit student)
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# tapply function
quality <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),mean)
cutoff <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),min)
size <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),length)
schoolLevel <- merge(schoolLevel,quality,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,cutoff,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,size,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
names(schoolLevel)[7] <- "quality"
names(schoolLevel)[8] <- "cutoff"
names(schoolLevel)[9] <- "size"
View(schoolLevel)
# Exercise 3 ----
# clean datjsu
datjsu <- na.omit(datjsu)
datstu_c3 <- merge(datsss_u,datstu_c[,17:19],by.y="resultSchool",by.x="schoolcode",all = TRUE)
View(datstu_c)
datstu_c3 <- merge(datsss_u,datstu_c[,17:19],by.y="resultSchool",by.x="schoolcode")
datstu_c3 <- merge(datstu_c,datjsu,by="jssdistrict")
View(datstu_c3)
View(datstu_c)
# Exercise 3 ----
# clean datjsu
datjsu <- na.omit(datjsu)
datjsu$X <- NULL
rm(datstu_c3)
datstu_c3 <- merge(datsss_u,datstu_c[,17:19],by.y="resultSchool",by.x="schoolcode")
datstu_c3 <- merge(datstu_c,datjsu,by="jssdistrict")
View(datstu)
datstu_c3 <- merge(datstu_c[,17:19],datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c3 <- merge(datstu_c,datjsu,by="jssdistrict")
datstu_c3 <- merge(datstu_c[,17:19],datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c3 <- merge(datstu_c3,datjsu,by="jssdistrict")
View(datstu_c3)
names(datstu_c3)[8] <- "jsslong"
names(datstu_c3)[9] <- "jsslat"
datstu_c3$dist <- sqrt((69.172*(datstu_c3$ssslong - datstu_c3$jsslong)*cos(datstu_c3$jsslat/57.3))^2+ (69.172*(datstu_c3$ssslat-datstu_c3$jsslat))^2)
# adding the jss/sss 's long and lat
datstu_c3 <- merge(datstu_c[,17:19],datsss_u,by.x="resultSchool",by.y="schoolcode")
View(datsss_u)
names(datstu_c3)[4] <- "highschoolname"
names(datstu_c3)[4] <- "highSchoolName"
names(datstu_c3)[8] <- "jsslong"
names(datstu_c3)[9] <- "jsslat"
datstu_c3 <- merge(datstu_c3,datjsu,by="jssdistrict")
names(datstu_c3)[8] <- "jsslong"
names(datstu_c3)[9] <- "jsslat"
datstu_c3$dist <- sqrt((69.172*(datstu_c3$ssslong - datstu_c3$jsslong)*cos(datstu_c3$jsslat/57.3))^2+ (69.172*(datstu_c3$ssslat-datstu_c3$jsslat))^2)
View(datstu_c)
View(datsss_u)
# adding the jss/sss 's long and lat
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c <- merge(datstu_c,datjsu,by="jssdistrict")
rm(list=ls())
# Set Working directory
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Reading the CSV files
datstu <- read.csv("datstu.csv",header = TRUE,na.strings=c("", "NA"))
datsss <- read.csv("datsss.csv",header = TRUE,na.strings=c("", "NA"))
datjsu <- read.csv("datjss.csv",header = TRUE,na.strings=c("", "NA"))
# Exercise 1 ----
# Number of student
stuNum <-length(datstu$X)
# Number of school
school <- as.vector(as.matrix(datstu[,5:10]))
schoolNum <- length(na.omit(unique(school)))
# Number of program
program <- as.vector(as.matrix(datstu[,11:16]))
programNum <- length(na.omit(unique(program)))
# Number of Choice
choice <- na.omit(unique(cbind(school, program)))
choice <- as.data.frame(choice)
choiceNum <- length(choice)
# Number of NA's in the score
missing <- sum(is.na(datstu$score))
# Apply to the same school
index <- rep(1:stuNum,6) # creating a index column, since "school" goes by person
app <- na.omit(unique(cbind(index,school))) #combine with school directly,and take out repeat and NA's
app <- as.data.frame(app) #conforming the format
# app <- app[order(app[,2]),] # if you want to rank the result
sameSchool <- table(app[,2])
# Num of Students who apply for less than 6
lessThan_6 <- sum(is.na(datstu$schoolcode6)) #by observing, only need to look for student who didn't fill the schoolcode6
# Exercise 2 ----
# Cleaning datsss
datsss$X <- NULL
# removing those repeating school names with numbers and NAs
datsss_u <- datsss[order(datsss[,1]),]
datsss_u <- datsss_u[!grepl("[[:digit:]]{5}",datsss_u$schoolname),]
datsss_u <- na.omit(datsss_u)
datsss_u <- datsss_u[!duplicated(datsss_u$schoolcode),]
# Merging
choice <- choice[order(choice[,1]),] # ranking for observation
schoolLevel <- merge(choice,datsss_u,by.x="school",by.y="schoolcode")
# Adding admission result (I noticed that there are programs who did't admit student)
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# tapply function
quality <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),mean)
cutoff <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),min)
size <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),length)
schoolLevel <- merge(schoolLevel,quality,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,cutoff,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,size,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
names(schoolLevel)[7] <- "quality"
names(schoolLevel)[8] <- "cutoff"
names(schoolLevel)[9] <- "size"
# Exercise 3 ----
# clean datjsu
datjsu <- na.omit(datjsu)
datjsu$X <- NULL
# adding the jss/sss 's long and lat
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# adding the jss/sss 's long and lat
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode",sort = FALSE)
datstu_c <- merge(datstu_c,datjsu,by.x ="jssdistrict",by.y = "jssdistrict")
datstu_c <- datstu_c[,c(3:19,1,20,2,21:26)]
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# adding the jss/sss 's long and lat
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")[,c("schoolname","sssdistrict","ssslong","ssslat")]
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# adding the jss/sss 's long and lat
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c <- merge(datstu_c,datjsu,by.x ="jssdistrict",by.y = "jssdistrict")
datstu_c <- datstu_c[,c(3:19,2,20,1,21:26)] # reorder the columns
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c <- merge(datstu_c,datjsu,by.x ="jssdistrict",by.y = "jssdistrict")
names(datstu_c)[-6] <- "highSchoolName"
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c <- merge(datstu_c,datjsu,by.x ="jssdistrict",by.y = "jssdistrict")
names(datstu_c)[names(datstu_c)=="schoolname"] <- "highSchoolName"
names(datstu_c)[names(datstu_c)=="point_x"] <- "jsslong"
names(datstu_c)[names(datstu_c)=="point_y"] <- "jsslat"
#Calculating the dist
datstu_c$dist <- sqrt((69.172*(datstu_c$ssslong - datstu_c$jsslong)*cos(datstu_c$jsslat/57.3))^2+ (69.172*(datstu_c$ssslat-datstu_c$jsslat))^2)
# Exercise 4 ----
# For each ranked choice
rankedDescrip <- aggregate(datstu_c$score,list(datstu_c$rankplace),min)
View(rankedDescrip)
distance<- function(ssslong,ssslat,jsslong,jsslat){
dist <- sqrt((69.172*(datstu_c$ssslong - datstu_c$jsslong)*cos(datstu_c$jsslat/57.3))^2+ (69.172*(datstu_c$ssslat-datstu_c$jsslat))^2)
return(dist)
}
distance<- function(ssslong,ssslat,jsslong,jsslat){
dist <- sqrt((69.172*(ssslong - jsslong)*cos(jsslat/57.3))^2+ (69.172*(ssslat-jsslat))^2)
return(dist)
}
rm(list=ls())
# Set Working directory
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW")
# Reading the CSV files
datstu <- read.csv("datstu.csv",header = TRUE,na.strings=c("", "NA"))
datsss <- read.csv("datsss.csv",header = TRUE,na.strings=c("", "NA"))
datjsu <- read.csv("datjss.csv",header = TRUE,na.strings=c("", "NA"))
# Exercise 1 ----
# Number of student
stuNum <-length(datstu$X)
# Number of school
school <- as.vector(as.matrix(datstu[,5:10]))
schoolNum <- length(na.omit(unique(school)))
# Number of program
program <- as.vector(as.matrix(datstu[,11:16]))
programNum <- length(na.omit(unique(program)))
# Number of Choice
choice <- na.omit(unique(cbind(school, program)))
choice <- as.data.frame(choice)
choiceNum <- length(choice)
# Number of NA's in the score
missing <- sum(is.na(datstu$score))
# Apply to the same school
index <- rep(1:stuNum,6) # creating a index column, since "school" goes by person
app <- na.omit(unique(cbind(index,school))) #combine with school directly,and take out repeat and NA's
app <- as.data.frame(app) #conforming the format
# app <- app[order(app[,2]),] # if you want to rank the result
sameSchool <- table(app[,2])
# Num of Students who apply for less than 6
lessThan_6 <- sum(is.na(datstu$schoolcode6)) #by observing, only need to look for student who didn't fill the schoolcode6
# Exercise 2 ----
# Cleaning datsss
datsss$X <- NULL
# removing those repeating school names with numbers and NAs
datsss_u <- datsss[order(datsss[,1]),]
datsss_u <- datsss_u[!grepl("[[:digit:]]{5}",datsss_u$schoolname),]
datsss_u <- na.omit(datsss_u)
datsss_u <- datsss_u[!duplicated(datsss_u$schoolcode),]
# Merging
choice <- choice[order(choice[,1]),] # ranking for observation
schoolLevel <- merge(choice,datsss_u,by.x="school",by.y="schoolcode")
# Adding admission result (I noticed that there are programs who did't admit student)
datstu_c <- datstu[!(is.na(datstu$rankplace)|datstu$rankplace == 99),] # clean NA and 99 in datstu
datstu_c$resultSchool <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+4)]
datstu_c$resultProgram <- datstu_c[cbind(seq_along(datstu_c$rankplace),datstu_c$rankplace+10)]
datstu_c$resultSchool <- as.integer(datstu_c$resultSchool)
# tapply function
quality <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),mean)
cutoff <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),min)
size <- aggregate(datstu_c$score,list(datstu_c$resultSchool,datstu_c$resultProgram),length)
schoolLevel <- merge(schoolLevel,quality,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,cutoff,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
schoolLevel <- merge(schoolLevel,size,by.x=c("school","program"),by.y=c("Group.1","Group.2"))
names(schoolLevel)[7] <- "quality"
names(schoolLevel)[8] <- "cutoff"
names(schoolLevel)[9] <- "size"
# Exercise 3 ----
# clean datjsu
datjsu <- na.omit(datjsu)
datjsu$X <- NULL
# adding the jss/sss 's long and lat
datstu_c <- merge(datstu_c,datsss_u,by.x="resultSchool",by.y="schoolcode")
datstu_c <- merge(datstu_c,datjsu,by.x ="jssdistrict",by.y = "jssdistrict")
names(datstu_c)[names(datstu_c)=="schoolname"] <- "highSchoolName"
names(datstu_c)[names(datstu_c)=="point_x"] <- "jsslong"
names(datstu_c)[names(datstu_c)=="point_y"] <- "jsslat"
distance<- function(ssslong,ssslat,jsslong,jsslat){
dist <- sqrt((69.172*(ssslong - jsslong)*cos(jsslat/57.3))^2+ (69.172*(ssslat-jsslat))^2)
return(dist)
}
datstu_c$dist <- distance(datstu_c$ssslong,datstu_c$ssslat,datstu_c$jsslong,datstu_c$jsslat)

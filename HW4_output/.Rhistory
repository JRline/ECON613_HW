knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW/HW4_output")
# install.packages("lme4")
# install.packages("Matrix")
library("lme4")
kt <- read.csv("Koop-Tobias.csv")
rd <- sample(1:2178,5)
dimension <- aggregate(list(Dimension = kt$PERSONID), list(PERSONID = kt$PERSONID), length)[rd,]
rownames(dimension) <- NULL
dimension
re.lm <- lmer(LOGWAGE ~ EDUC + POTEXPER + (1|PERSONID), data = kt)
summary(re.lm)
groupmean <- function(x,id,rep = T){# calculate the mean for each individual id, and and repeat these mean for the same id/ or use ave
dim <- aggregate(list(Tp = id), list(id = id), length)
mean <- aggregate(list(idmean = x),list(id = id),mean)
gpmean <- rep(mean$idmean,dim$Tp)
ifelse(rep == T, return(gpmean),return(mean$idmean))
}
fix.bt <- function(y,X,id){
dep <- groupmean(y,id,rep = F)
indep <- apply(X,2,groupmean, id = id, rep = F)
result <- lm(dep~indep)
return(result)
}
fix.wi <- function(y,X,id){
dep <- y - groupmean(y,id)
indep <- as.matrix(X - apply(X,2,groupmean, id = id))
result <- lm(dep~0+indep)
return(result)
}
fix.re.ib <- function(y,X,id){
N <- length(id)
n <- length(unique(id))
k <- ncol(X)
sigma2_u <- sum((summary(fix.bt(y,X,id))$residual)^2)/(n-k)
sigma2_e <- sum((summary(fix.wi(y,X,id))$residual)^2)/((N-n)-k)
# for unbalanced panel use harmonized mean of time period of each id has
dim <- aggregate(list(Tp = id), list(id = id), length)
Th <- length(unique(id))/sum(1/dim$Tp)
sigma2_v <- sigma2_u - sigma2_e/Th
# Calculate lumbda for the tranformed model
Tp_i <- rep(dim$Tp,dim$Tp)
lambda <- 1-sqrt(sigma2_e/(Tp_i*sigma2_v + sigma2_e)) # special case of unbalanced panel
# Transformed model
X <- cbind(Intercept = 1,X)
dep <- y - lambda*groupmean(y,id)
indep <- as.matrix(X - rep(lambda,ncol(X))*apply(X,2,groupmean, id = id))
result <- lm(dep~0+indep)
return(result)
}
coef(fix.re.ib(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.wi(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.bt(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
y = kt$LOGWAGE
X = kt[,c("EDUC","POTEXPER")]
id = kt$PERSONID
View(kt)
df <- data.frame(y,X,id)
for (i in 1:ncol(X)){
df <- transform(df, co=ave(X[,i], id, FUN = function(x) c(NA, diff(x))))
names(newprice)[ncol(df)]<-paste("indep",i,sep=" ")
}
for (i in 1:ncol(X)){
df <- transform(df, co=ave(X[,i], id, FUN = function(x) c(NA, diff(x))))
names(df)[ncol(df)]<-paste("indep",i,sep=" ")
}
View(df)
N <- length(id)
k <- ncol(X)
sigma2_e <- sum((summary(fix.wi(y,X,id))$residual)^2)/((N-n)-k)
Th <- length(unique(id))/sum(1/dim$Tp)
n <- length(unique(id))
k <- ncol(X)
sigma2_u <- sum((summary(fix.bt(y,X,id))$residual)^2)/(n-k)
# for unbalanced panel use harmonized mean of time period of each id has
dim <- aggregate(list(Tp = id), list(id = id), length)
Th <- length(unique(id))/sum(1/dim$Tp)
sigma2_v <- sigma2_u - sigma2_e/Th
# Calculate lumbda for the tranformed model
Tp_i <- rep(dim$Tp,dim$Tp)
sigma2_e <- sum((summary(fix.wi(y,X,id))$residual)^2)/((N-n)-k)
# for unbalanced panel use harmonized mean of time period of each id has
dim <- aggregate(list(Tp = id), list(id = id), length)
Th <- length(unique(id))/sum(1/dim$Tp)
sigma2_v <- sigma2_u - sigma2_e/Th
# Calculate lumbda for the tranformed model
Tp_i <- rep(dim$Tp,dim$Tp)
lambda <- 1-sqrt(sigma2_e/(Tp_i*sigma2_v + sigma2_e)) # special case of unbalanced panel
l = data.frame(lambda)
View(l)
tp = data.frame
tp = data.frame(Tp_i)
View(kt)
View(tp)
X <- kt[,c("EDUC","POTEXPER")]
y = kt$LOGWAGE
id = kt$PERSONID
df <- data.frame(y,X,id)
View(df)
df <- transform(df, co=ave(EDUC, PERSONID, FUN = function(x) c(NA, diff(x))))
df <- transform(df, co=ave(EDUC, id, FUN = function(x) c(NA, diff(x))))
df <- data.frame(y,X,id)
for (i in 1:ncol(X)){
df <- transform(df, co=ave(X[,i], id, FUN = function(x) c(NA, diff(x))))
names(df)[ncol(df)]<-paste("indep",i,sep=" ")
}
View(df)
df <- data.frame(y,X,id)
for (i in 1:ncol(X)){
df <- transform(df, col=ave(X[,i], id, FUN = function(x) c(NA, diff(x))))
names(df)[ncol(df)]<-paste("indep",i,sep=" ")
}
df <- transform(df, dep=ave(y, id, FUN = function(x) c(NA, diff(x))))
indep <- na.omit(df[,grepl("indep",colnames(df))])
dep <- na.omit(df[,"dep"])
result <- lm(dep~0+indep)
indep <- as.matrix(na.omit(df[,grepl("indep",colnames(df))]))
dep <- na.omit(df[,"dep"])
result <- lm(dep~0+indep)
summary(result)
fix.fd <- function(y,X,id){
df <- data.frame(y,X,id)
for (i in 1:ncol(X)){
df <- transform(df, col=ave(X[,i], id, FUN = function(x) c(NA, diff(x))))
names(df)[ncol(df)]<-paste("indep",i,sep=" ")
}
df <- transform(df, dep=ave(y, id, FUN = function(x) c(NA, diff(x))))
indep <- as.matrix(na.omit(df[,grepl("indep",colnames(df))]))
dep <- na.omit(df[,"dep"])
result <- lm(dep~0+indep)
return(result)
}
coef(fix.fd(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
# randomly selection 100 individual
kt.rand <- kt[sample(1:2178,100),]
# randomly selection 100 individual
kt.rand <- kt[id == sample(1:2178,100),]
kt.rand <- kt[id == 3,]
View(kt.rand)
kt.rand <- kt[id == 1,]
kt.rand <- kt[id == c(1,2),]
kt.rand <- kt[kt$id %in% rand,]
# randomly selection 100 individual
rand <- sample(1:2178,100)
View(kt.rand)
kt.rand <- kt[kt$id %in% rand,]
# randomly selection 100 individual
rand <- sample(1:2178,100)
View(kt)
kt.rand <- kt[kt$id %in% rand,]
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$id %in% rnd,]
head(rd)
c(60,1928,269)
kt.rand <- kt[kt$id %in% c(60,1928,269),]
kt.rand <- kt[kt$id %in% 1,]
kt$id %in% rnd
kt.rand <- kt[kt$PERSONID %in% rnd,]
dim <- aggregate(list(Tp = id), list(id = id), length)
View(dim)
rep(1,dim[,2])
rep(1,dim$Tp)
dummmax <- matrix(0,nrow(kt$PERSONID),100)
dummmax <- matrix(0,nrow(kt.rand),100)
idx <- unique(kt.rand$PERSONID)
dummmax <- diag(100)
dim <- aggregate(list(Tp = id), list(id = id), length)
id <- kt.rand$PERSONID
dummmax <- diag(100)
kt.rand$D = 0
View(kt.rand)
names(kt.rand)["D"] <- "dummy"
rep(1,dim$Tp)
id <- kt.rand$PERSONID
for (i in 1:100){
kt.rand$D <- 0
kt.rand[kt.rand$PERSONID == i,D] <- 1
names(kt.rand)[ncol(kt.rand)] <- paste("Dummy_",i,sep = "")
}
i = 1
kt.rand <- kt[kt$PERSONID %in% rnd,]
kt.rand$D <- 0
View(kt.rand)
kt.rand[kt.rand$PERSONID == i,D] <- 1
kt.rand[kt.rand$PERSONID == i,D]
kt.rand["PERSONID" == i,"D"]
kt.rand["PERSONID" == i,"D"] <- 1
kt.rand$D <- 0
kt.rand["PERSONID" == idx[i],"D"] <- 1
idx[i]
kt.rand["PERSONID" == idx[i],"D"]
kt.rand["PERSONID" == idx[i],ncol(kt.rand)]
kt.rand$D <- rep(0,ncol(kt.rand)
kt.rand["PERSONID" == idx[i],ncol(kt.rand)] <- 1
kt.rand$D <- rep(0,ncol(kt.rand))
ncol(kt.rand)
kt.rand$PERSONID == 6
kt.rand[kt.rand$PERSONID == idx[i],ncol(kt.rand)] <- 1
names(kt.rand)[ncol(kt.rand)] <- paste("Dummy_",idx[i],sep = "")
kt.rand <- kt[kt$PERSONID %in% rnd,]
idx <- unqiue(kt.rand$PERSONID)
for (i in 1:100){
kt.rand$D <- 0
kt.rand[kt.rand$PERSONID == idx[i],ncol(kt.rand)] <- 1
names(kt.rand)[ncol(kt.rand)] <- paste("Dummy_",idx[i],sep = "")
}
indep <- c(kt.rand$EDUC,kt.rand$POTEXPER,kt.rand[,grepl("Dummy_",colnames(kt.rand))])
View(indep)
dummy <- kt.rand[,grepl("Dummy_",colnames(kt.rand))]
View(dummy)
indep <- cbind(kt.rand$EDUC,kt.rand$POTEXPER,dummy)
dep <- kt.rand$LOGWAGE
result.d <- lm(dep~0+indep)
indep <- as.matrix(cbind(kt.rand$EDUC,kt.rand$POTEXPER,dummy))
result.d <- lm(dep~0+indep)
summary(result.d)
dummy <- dummy[,-1]
print("use the first selected individual as reference, who is",i)
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
idx <- unique(kt.rand$PERSONID)
for (i in 1:100){
kt.rand$D <- 0
kt.rand[kt.rand$PERSONID == idx[i],ncol(kt.rand)] <- 1
names(kt.rand)[ncol(kt.rand)] <- paste("Dummy_",idx[i],sep = "")
}
dep <- kt.rand$LOGWAGE
dummy <- kt.rand[,grepl("Dummy_",colnames(kt.rand))]
dummy <- dummy[,-1]
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
indep <- as.matrix(cbind(kt.rand$EDUC,kt.rand$POTEXPER,dummy))
result.d <- lm(dep~0+indep)
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
idx <- unique(kt.rand$PERSONID)
for (i in 1:100){
kt.rand$D <- 0
kt.rand[kt.rand$PERSONID == idx[i],ncol(kt.rand)] <- 1
names(kt.rand)[ncol(kt.rand)] <- paste("Dummy_",idx[i],sep = "")
}
dep <- kt.rand$LOGWAGE
dummy <- kt.rand[,grepl("Dummy_",colnames(kt.rand))]
dummy <- dummy[,-1]
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
indep <- as.matrix(cbind(kt.rand$EDUC,kt.rand$POTEXPER,dummy))
result.d <- lm(dep~0+indep)
summary(result.d)
kt.rand[,"PERSONID"]
kt.rand["PERSONID" == 6,]
kt.rand["PERSONID" == 1,]
id = PERSONID
id = "PERSONID"
kt.rand$id
kt.rand$str(id)
# write a function that can estimate the fix effect
fix.fd <- function(df, y_name, X_name,id_name){
idcol <- ncol(df[,id_name])
idx <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1]
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
dep <- df[,y_name]
indep <- as.matrix(cbind(df[,X_name],dummy))
result.d <- lm(dep~0+indep)
return(result.d)
}
coef(fix.fd(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
y_name = "LOGWAGE"
X_name = c("EDUC","POTEXPER")
id_name = "PERSONID"
idcol <- ncol(df[,id_name])
df = kt.rand
idcol <- which( colnames(df)=="id_name" )
idcol <- which( colnames(df)== id_name )
idx <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1]
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
dep <- df[,y_name]
indep <- as.matrix(cbind(df[,X_name],dummy))
result.d <- lm(dep~0+indep)
return(result.d)
coef(fix.fd(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
# write a function that can estimate the fix effect
fix.fd <- function(df, y_name, X_name,id_name){
idcol <- which( colnames(df)== id_name )
idx <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1]
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
dep <- df[,y_name]
indep <- as.matrix(cbind(df[,X_name],dummy))
result.d <- lm(dep~0+indep)
return(result.d)
}
coef(fix.fd(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
# write a function that can estimate the fix effect
fix.fd <- function(df, y_name, X_name,id_name){
idcol <- which( colnames(df)== id_name )
idx <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1]
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
dep <- df[,y_name]
indep <- as.matrix(cbind(df[,X_name],dummy))
result.d <- lm(dep~0+indep)
return(result.d)
}
summary(fix.fd(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
summary(fix.fd(kt.rand,"LOGWAGE",c("ABILITY","MOTHERED", "FATHERED","BRKNHOME","SIBLINGS"),"PERSONID"))
summary(fix.fd(kt.rand,"LOGWAGE",c("ABILITY","MOTHERED", "FATHERED","BRKNHOME","SIBLINGS"),"PERSONID"))
# check with ols
fix.dum <-lm(LOGWAGE ~ EDUC + POTEXPER + factor(PERSONID) - 1, data = kt.rand)
# check with ols
fix.dum <-lm(LOGWAGE ~ EDUC + POTEXPER+factor(PERSONID) - 1, data = kt.rand)
summary(fixed.dum)
summary(fix.dum)
summary(fix.dum(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
# write a function that can estimate the fix effect
fix.dum <- function(df, y_name, X_name,id_name){
idcol <- which( colnames(df)== id_name )
idx <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, who is",idx[1],sep = " "))
dep <- df[,y_name]
indep <- as.matrix(cbind(df[,X_name],dummy))
result.d <- lm(dep~0+indep)
return(result.d)
}
summary(fix.dum(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# check with ols
fix.dum <-lm(LOGWAGE ~ EDUC + POTEXPER+factor(PERSONID) - 1, data = kt.rand)
summary(fix.dum)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW/HW4_output")
# install.packages("lme4")
# install.packages("Matrix")
library("lme4")
kt <- read.csv("Koop-Tobias.csv")
rd <- sample(1:2178,5)
dimension <- aggregate(list(Dimension = kt$PERSONID), list(PERSONID = kt$PERSONID), length)[rd,]
rownames(dimension) <- NULL
dimension
re.lm <- lmer(LOGWAGE ~ EDUC + POTEXPER + (1|PERSONID), data = kt)
summary(re.lm)
groupmean <- function(x,id,rep = T){# calculate the mean for each individual id, and and repeat these mean for the same id/ or use ave
dim <- aggregate(list(Tp = id), list(id = id), length)
mean <- aggregate(list(idmean = x),list(id = id),mean)
gpmean <- rep(mean$idmean,dim$Tp)
ifelse(rep == T, return(gpmean),return(mean$idmean))
}
fix.bt <- function(y,X,id){
dep <- groupmean(y,id,rep = F)
indep <- apply(X,2,groupmean, id = id, rep = F)
result <- lm(dep~indep)
return(result)
}
fix.wi <- function(y,X,id){
dep <- y - groupmean(y,id)
indep <- as.matrix(X - apply(X,2,groupmean, id = id))
result <- lm(dep~0+indep)
return(result)
}
fix.re.ib <- function(y,X,id){
N <- length(id)
n <- length(unique(id))
k <- ncol(X)
sigma2_u <- sum((summary(fix.bt(y,X,id))$residual)^2)/(n-k)
sigma2_e <- sum((summary(fix.wi(y,X,id))$residual)^2)/((N-n)-k)
# for unbalanced panel use harmonized mean of time period of each id has
dim <- aggregate(list(Tp = id), list(id = id), length)
Th <- length(unique(id))/sum(1/dim$Tp)
sigma2_v <- sigma2_u - sigma2_e/Th
# Calculate lumbda for the tranformed model
Tp_i <- rep(dim$Tp,dim$Tp)
lambda <- 1-sqrt(sigma2_e/(Tp_i*sigma2_v + sigma2_e)) # special case of unbalanced panel
# Transformed model
X <- cbind(Intercept = 1,X)
dep <- y - lambda*groupmean(y,id)
indep <- as.matrix(X - rep(lambda,ncol(X))*apply(X,2,groupmean, id = id))
result <- lm(dep~0+indep)
return(result)
}
coef(fix.re.ib(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.wi(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.bt(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
fix.fd <- function(y,X,id){
df <- data.frame(y,X,id)
for (i in 1:ncol(X)){
df <- transform(df, col=ave(X[,i], id, FUN = function(x) c(NA, diff(x))))
names(df)[ncol(df)]<-paste("indep",i,sep=" ")
}
df <- transform(df, dep=ave(y, id, FUN = function(x) c(NA, diff(x))))
indep <- as.matrix(na.omit(df[,grepl("indep",colnames(df))]))
dep <- na.omit(df[,"dep"])
result <- lm(dep~0+indep)
return(result)
}
coef(fix.fd(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
# check with ols
fix.dum <-lm(LOGWAGE ~ EDUC + POTEXPER+factor(PERSONID) - 1, data = kt.rand)
summary(fix.dum)
fix.dum <-lm(LOGWAGE ~ EDUC + POTEXPER+factor(PERSONID) - 1, data = kt.rand)
summary(fix.dum)

}
fix.wi <- function(y,X,id){
dep     <- y - tmean(y,id)
indep   <- as.matrix(X - apply(X,2,tmean, id = id))
result  <- lm(dep~0+indep)
return(result)
}
fix.re.ib <- function(y,X,id){
N <- length(id)
n <- length(unique(id))
k <- ncol(X)
sigma2_u <- sum((summary(fix.bt(y,X,id))$residual)^2)/(n-k)
sigma2_e <- sum((summary(fix.wi(y,X,id))$residual)^2)/((N-n)-k)
# for unbalanced panel use harmonized mean of time period of each id has
dim       <- aggregate(list(Tp = id), list(id = id), length)
Th        <- length(unique(id))/sum(1/dim$Tp)
sigma2_v  <- sigma2_u - sigma2_e/Th
# Calculate lumbda for the tranformed model
Tp_i    <- rep(dim$Tp,dim$Tp)
lambda  <- 1-sqrt(sigma2_e/(Tp_i*sigma2_v + sigma2_e)) # special case of unbalanced panel
# Transformed model
X       <- cbind(Intercept = 1,X)
dep     <- y - lambda*tmean(y,id)
indep   <- as.matrix(X - rep(lambda,ncol(X))*apply(X,2,tmean, id = id))
result  <- lm(dep~0+indep)
return(result)
}
fix.fd <- function(y,X,id){
df <- data.frame(y,X,id)
for (i in 1:ncol(X)){
df <- transform(df, col=ave(df[,i+1], df$id, FUN = function(x) c(NA, diff(x)))) # MUST include FUN, or cause error
names(df)[ncol(df)]<-paste("indep",i,sep=" ")
}
df <- transform(df, dep=ave(y, id, FUN = function(x) c(NA, diff(x))))
indep   <- as.matrix(na.omit(df[,grepl("indep",colnames(df))]))
dep     <- na.omit(df[,"dep"])
result  <- lm(dep~0+indep)
return(result)
}
coef(fix.re.ib(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.wi(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.bt(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
coef(fix.fd(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID))
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),as.matrix(dummy))
b <- rnorm(102)
result <- optim(b, ll.DVLS)
result$par
coef(fix.dvls(kt.rand,"LOGWAGE",c("ABILITY","MOTHERED","FATHERED","BRKNHOME","SIBLINGS"),"PERSONID"))
X <- as.matrix(kt[,c("EDUC","POTEXPER")])
inv_XX <- solve(t(X) %*% X)
residual <- fix.wi(kt$LOGWAGE,kt[,c("EDUC","POTEXPER")],kt$PERSONID)$residuals
D <- t(X) %*% diag(residual)^2 %*% X
EHW <- inv_XX %*% D %*% inv_XX
diag(sqrt(EHW))
result$convergence
result
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
# dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),as.matrix(dummy))
b <- rnorm(103)
result <- optim(b, ll.DVLS)
result$par
result
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
# dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),as.matrix(dummy))
b <- rnorm(103)
result <- optim(b, ll.DVLS)
result$par
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
# dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),1)
b <- rnorm(103)
result <- optim(b, ll.DVLS)
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
# dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),1)
b <- rnorm(4)
result <- optim(b, ll.DVLS)
result$par
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
View(dummy)
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
# dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),1)
b <- rnorm(4)
result <- optim(b, ll.DVLS)
result$par
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
# dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],1))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),1)
b <- rnorm(4)
result <- optim(b, ll.DVLS)
result$par
View(kt.rand)
r <- lm(kt.rand$LOGWAGE~kt.rand$EDUC+kt.rand$POTEXPER)
summary(r)
result$par
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]))
b <- rnorm(3)
result <- optim(b, ll.DVLS)
result$par
View(kt.rand)
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef <- coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER"),dummy]))
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),as.matrix(dummy))
b <- rnorm(102)
result <- optim(b, ll.DVLS)
result$par
# randomly selection 100 individual
rnd <- sample(1:2178,100)
kt.rand <- kt[kt$PERSONID %in% rnd,]
fix.dvls <- function(df, y_name, X_name,id_name,dmatrix = F){
idcol <- which( colnames(df)== id_name )
idx   <- unique(df[,idcol])
for (i in 1:100){
df$D <- 0
df[df[,idcol] == idx[i],ncol(df)] <- 1
names(df)[ncol(df)] <- paste("Dummy_",idx[i],sep = "")
}
dummy <- df[,grepl("Dummy_",colnames(df))]
dummy <- dummy[,-1] # drop the first person to avoid dummy variable trap
print(paste("use the first selected individual as reference, which id =",idx[1],sep = " "))
dep       <- df[,y_name]
indep     <- as.matrix(cbind(df[,X_name],dummy))
result.d  <- lm(dep~0+indep)
ifelse(dmatrix == F,return(result.d),return(dummy))
}
coef <- coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
# do with MLE
dummy <- fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID",dmatrix = T)
# Define likelihood function
ll.DVLS <- function(b){
n    <- length(y)
b    <- b[2:length(b)]
sig2 <- b[1]
ll   <- -n/2*log(2*pi)-n/2*log(sig2)-(y-X%*%b)^2/(2*sig2)
ll.s <- -sum(ll)
ll.s
return(ll.s)
}
set.seed(1)
y <- kt.rand$LOGWAGE
X <- cbind(as.matrix(kt.rand[,c("EDUC","POTEXPER")]),as.matrix(dummy))
b <- rnorm(102)
result <- optim(b, ll.DVLS)
result$par
coef <- coef(1:length-2)
coef <- coef(1:length(coef)-2)
class(coef)
typeof(coef)
coef <- as.vector(coef)
coef <- coef(1:length(coef)-2)
co <- coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
co <- coef(1:length(co)-2)
co <- coef(1:(length(co)-2))
head(co
)
co <- co(-1)
co <- coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
co <- co(-1)
View(dummy)
knitr::opts_chunk$set(echo = TRUE)
individual <- coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
head(individual)
individual <- individual(-2)
individual <- individual[3:length(individual)]
head(individual)
View(kt.rand)
help unique
? unique
kt.rand.tiv <- kt.rand[row.names(unique(kt.rand$PERSONID)),]
View(kt.rand.tiv)
kt.rand.tiv <- kt.rand[!duplicated(kt.rand$PERSONID),]
View(kt.rand.tiv)
head(!duplicated(kt.rand$PERSONID))
individual <- coef(fix.dvls(kt.rand,"LOGWAGE",c("EDUC","POTEXPER"),"PERSONID"))
individual <- individual[3:length(individual)]
kt.rand.tiv <- kt.rand.tiv[-1,]
kt.rand.tiv$individual <- individual
result.2 <- ml(individual~ABILITY + MOTHERED + FATHERED + BRKNHOME + SIBLINGS, df = kt.rand.tiv)
result.2 <- lm(individual~ABILITY + MOTHERED + FATHERED + BRKNHOME + SIBLINGS, df = kt.rand.tiv)
result.2 <- lm(individual~ABILITY + MOTHERED + FATHERED + BRKNHOME + SIBLINGS, kt.rand.tiv)
summary(result.2)
reg

X.s <- cbind(1,df.s[,c(3:5)])
# calculate ols coefficient in each sample
boot.coef <- cbind(boot.coef,ols(X.s,y.s))
}
# Report the SE over all the obtained coefficients
return(data.frame(se = apply(boot.coef,1,sd)))
}
boot.se_49 <- bootstrapse(49)
boot.se_499 <- bootstrapse(499)
boot.se_49
boot.se_499
probit.llike <- function(b. = b, y. = ydum,X. = X){
phi <- pnorm(X.%*%b.)
phi[phi==1] <- 0.9999 # avoid NaN of log function
phi[phi==0] <- 0.0001
f <- sum(y.*log(phi))+sum((1-y.)*log(1-phi))
f <- -f
return(f)
}
jacobian <- function(fun,par){
d <- 1e-8
par. <- matrix(par,length(par),length(par)) # generate a matrix that repeating par vector
J <- (apply(par. + diag(d,length(b)),2,fun)-apply(par.,2,fun))/d
return(J)
}
graddes <- function(b,stop,fun){
d <- 1e-8 # delta in the finite difference method
alpha <- 0.1 # any initial alpha
delta <- Inf
while (delta > stop){
# Calculate gradient for each regressor by Finite Difference Method
g <- jacobian(probit.llike,b)
# Backtracking (Armijo–Goldstein condition tests to make sure the size of alpha)
if(fun(b - alpha*g)>fun(b)-0.1*alpha*t(g)%*%g){
alpha <- 0.5*alpha
next
}
# Make step forward (t+1) and saved in bn
bn <- b - alpha*g
# Stopping Criteria
delta <- (abs(fun(bn)-fun(b))/abs(fun(b)))
b <- bn
}
return(b)
}
result.gd <- graddes(c(0,0,0,0),1e-5,probit.llike)
jacobian <- function(fun,par){
d <- 1e-8
par. <- matrix(par,length(par),length(par)) # generate a matrix that repeating par vector
J <- (apply(par. + diag(d,length(par)),2,fun)-apply(par.,2,fun))/d
return(J)
}
graddes <- function(b,stop,fun){
d <- 1e-8 # delta in the finite difference method
alpha <- 0.1 # any initial alpha
delta <- Inf
while (delta > stop){
# Calculate gradient for each regressor by Finite Difference Method
g <- jacobian(probit.llike,b)
# Backtracking (Armijo–Goldstein condition tests to make sure the size of alpha)
if(fun(b - alpha*g)>fun(b)-0.1*alpha*t(g)%*%g){
alpha <- 0.5*alpha
next
}
# Make step forward (t+1) and saved in bn
bn <- b - alpha*g
# Stopping Criteria
delta <- (abs(fun(bn)-fun(b))/abs(fun(b)))
b <- bn
}
return(b)
}
result.gd <- graddes(c(0,0,0,0),1e-5,probit.llike)
result.gd
b.p <- c(0,0,0,0)
result.p <- optim(par = b.p, probit.llike)
result.p$par
logit.llike <- function(b., y. = ydum,X. = X){
gamma <- exp(X.%*%b.)/(1+exp(X.%*%b.))
f <- sum(y.*log(gamma))+sum((1-y.)*log(1-gamma))
f <- -f
return(f)
}
b.l <- c(0,0,0,0)
result.l <- optim(par = b.l, logit.llike)
result.l$par
result.lp <- lm(ydum~X1+X2+X3)
summary(result.lp)
result.p.glm <- glm(ydum ~ X1 + X2 + X3, family = binomial(link = "probit"),
data = data.frame(mydata))
coef(summary(result.p.glm))
result.l.glm <- glm(ydum ~ X1 + X2 + X3, family = binomial(link = "logit"),
data = data.frame(mydata))
coef(summary(result.l.glm))
AME.p <- function(result) mean(dnorm(X%*%result))*result # result are the parameters
AME.p(coef(result.p.glm))
AME.l <- function(result) mean(dlogis(X%*%result))*result
AME.l(coef(result.l.glm))
J <- jacobian(AME.p, coef(result.p.glm)) # "jacobian" defined in EX3
cov_matrixv <- vcov(result.p.glm)
se.p <- sqrt(diag(J%*%cov_matrixv%*%t(J)))
se.p
J <- jacobian(AME.l, coef(result.l.glm))
cov_matrixv <- vcov(result.l.glm)
se.l <- sqrt(diag(J%*%cov_matrixv%*%t(J)))
se.l
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=1))[-1]
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(predict.glm(result, type = "link")))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
knit_with_parameters('C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW/HW2_output/HW2.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW/HW2_output/HW2.Rmd', encoding = 'UTF-8')
library(margins)
margins(result.l.glm)
summary(margins(result.l.glm))
summary(margins(result.p.glm))
AME.l <- function(result) mean(dlogis(X%*%result))*result
AME.l(coef(result.l.glm))
AME.l <- function(result) mean(dlogis(X%*%result)%*%result)
AME.l(coef(result.l.glm))
dlogis(X%*%result.gd)
dim(dlogis(X%*%result.gd))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(predict.glm(result, type = "link")))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
print(boot.me)
}
bootstrapse2(49,"probit")
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:49) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = "probit"),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(predict.glm(result, type = "link")))*coef(result)
boot.me <- cbind(boot.me,me)
}
warnings(\)
warnings()
View(boot.me)
sd(boot.me[2,])
sd(boot.me[3,])
View(mydata)
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(dnorm(X%*%result)))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
coef(result.l.glm)
as.vector(coef(result.l.glm))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(dnorm(X%*%as.vector(result)))*coef(result))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(dnorm(X%*%as.vector(coef(result)))*coef(result))
boot.me <- cbind(boot.me,me)
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(dnorm(X%*%as.vector(coef(result)))*coef(result)))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean((dnorm(X%*%coef(result)))*coef(result))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
predict.glm(result, type = "link")
X%*%coef(result)
head(mean(dnorm(X%*%coef(result.l.glm))*coef(result.l.glm)))
head(mean(dnorm(predict.glm(result, type = "link")))*coef(result))
View(X)
AME.l <- function(result) mean(dlogis(X%*%result))*result
AME.l(coef(result.l.glm))
mean(dlogis(X%*%coef(result.l.glm))*coef(result.l.glm)))
head(mean(dnorm(predict.glm(result, type = "link")))*coef(result))
mean(dlogis(X%*%coef(result.l.glm))*coef(result.l.glm)))
mean(dnorm(X%*%coef(result)))*coef(result)
mean(dnorm(predict.glm(result, type = "link")))*coef(result)
head(predict.glm(result, type = "link"))
head(X%*%coef(result))
head(predict(result, type = "link"))
predict.glm()
predict.glm
head(predict.glm(result.p.glm, type = "link"))
X%*%coef(result.p.glm)
head(predict.glm(result, type = "link"))
head(predict.glm(result.p.glm, type = "link"))
str(head(predict.glm(result, type = "link")))
summary(head(predict.glm(result, type = "link")))
summay(predict.glm(result.p.glm, type = "link"))
summary(predict.glm(result.p.glm, type = "link"))
summary(X%*%coef(result.p.glm))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dnorm(X%*%coef(result)))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
head(X%*%coef(result.p.glm))
head(predict.glm(result.p.glm, type = "link"))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
ifelse(l == "probit", dis=dnorm, dis=dlogis)
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dis(X%*%coef(result)))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
ifelse(l == "probit", dis <- dnorm, dis <- dlogis)
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function
boot.me <- data.frame(matrix(nrow=4, ncol=0))
ifelse(l == "probit", dis <- dnorm, dis <- dlogis)
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(dis(X%*%coef(result)))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
ifelse(l == "probit", pdf <- dnorm, pdf <- dlogis)
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(pdf(X%*%coef(result)))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result)))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
AME.p <- function(result) mean(dnorm(X%*%result))*result # result are the parameters
AME.p(coef(result.p.glm))
AME.l <- function(result) mean(dlogis(X%*%result))*result
AME.l(coef(result.l.glm))
class(AME.l(coef(result.l.glm)))
typeof(AME.l(coef(result.l.glm)))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- matrix(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = "probit"),data.frame(df.s))
matrix(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
AME.p(coef(result)
)
matrix(AME.p(coef(result))
)
# calculate Average marginal effect
me <- ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result)))
me <- AME.p(coef(result))
boot.me <- cbind(boot.me,me)
View(boot.me)
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result)))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
AME.p(coef(result)
)
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- data.frame(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
l = "probit"
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- data.frame(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
boot.me <- cbind(boot.me,me)
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- data.frame(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
boot.me <- cbind(boot.me,me)
View(boot.me)
rm(df.s)
rm(result)
rm(boot.me)
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
View(df.s)
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- data.frame(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
View(me)
boot.me <- cbind(boot.me,me)
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
rm(list=ls())
setwd("C:/Users/jiere/Dropbox/Spring 2019/ECON 613/ECON613_HW/HW2_output")
set.seed(613)
obs <- 10000
X1 <- runif(obs, max = 3, min = 1)
X2 <- rgamma(obs,3,scale = 2)
X3 <- rbinom(obs,1,0.3)
eps <- rnorm(obs, mean = 2, sd = 1)
Y <- 0.5 + 1.2*X1 - 0.9*X2 + 0.1*X3 + eps
ydum <- ifelse(Y > mean(Y),1,0)
mydata <- cbind(Y,ydum,X1,X2,X3,eps)
ols <- function(X,y,se=F){
n <- nrow(X)
k <- ncol(X)
ols.coef <- solve(t(X)%*%X)%*%(t(X)%*%y) #coefficient
ols.res <- (y-X%*%ols.coef) # residual
ols.V <- 1/(n-k) * as.numeric(t(ols.res)%*%ols.res)*solve(t(X)%*%X) #covariance matrix
ols.se <- as.matrix(sqrt(diag(ols.V))) #standard error
ifelse(se == T, return(data.frame(b_hat = ols.coef,se = ols.se)),return(data.frame(b_hat = ols.coef))) # output coef only by default
}
X <- cbind(1,X1,X2,X3)
y <- as.matrix(Y)
ols.result <- ols(X,y,se=T)
ols.result
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
l = "probit"
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
View(df.s)
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
coef(result)
AME.p(coef(result))
AME.p <- function(result) mean(dnorm(X%*%result))*result # result are the parameters
AME.p(coef(result.p.glm))
AME.p(coef(result.p.glm))
AME.p <- function(result) mean(dnorm(X%*%result))*result # result are the parameters
AME.p(coef(result)
)
# calculate Average marginal effect
me <- data.frame(ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result))))
View(me)
# calculate Average marginal effect
me <- ifelse(l == "probit", AME.p(coef(result)), AME.l(coef(result)))
bootstrapse2 <- function(n,l){
# input bootstrap times and type of link function (connect to different pdf)
boot.me <- data.frame(matrix(nrow=4, ncol=0))
pdf <-ifelse(l == "probit", dnorm, dlogis) # note to myself: ifelse can only return one value
for (i in 1:n) {
# sample from existing data to get X.s, y.s
df.s <- mydata[sample(nrow(mydata),size = nrow(mydata),replace = T),]
result <- glm(ydum ~ X1 + X2 + X3, family=binomial(link = l),data.frame(df.s))
# calculate Average marginal effect
me <- mean(pdf(X%*%coef(result)))*coef(result)
boot.me <- cbind(boot.me,me)
}
# Report the SE over all the obtained average margianl effect
return(data.frame(se = apply(boot.me,1,sd)))
}
bootstrapse2(49,"probit")
bootstrapse2(49,"logit")
